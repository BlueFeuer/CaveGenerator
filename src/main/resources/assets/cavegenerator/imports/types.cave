{
  # A function that produces a dummy noise
  # generator when optionally provided a
  # constant output to use.
  # Parameters: 
  #  @1? -> constant output
  # Examples:
  #  $dummy_generator()
  #  $dummy_generator(2.0)
  dummy_generator(): {
    dummy: true
    dummyOutput: @1?
  }
  # A function that produces a simple noise
  # generator when given a threshold and an
  # optional noise type.
  # Parameters: 
  #  @1  -> threshold
  #  @2? -> type
  # Examples:
  #  $simple_generator(-0.5, simplex)
  #  $simple_generator(-0.2)
  simple_generator(): {
    threshold: @1
    type: @2?(simplex)
  }
  # A function that produces a scalable float
  # (used in tunnels and ravines) which never
  # changes. In other words, it is constant.
  # Parameters: 
  #  @1 -> startVal
  # Examples:
  #  $constant(2)
  constant(): {
    startVal: @1
    startValRandFactor: 0
    factor: 1
    randFactor: 0
    exponent: 1
  }
  # Produces vine decorators on each axis when
  # given a height range, integrity, and region
  # parameters.
  # Parameters:
  #  @1  -> height
  #  @2  -> integrity
  #  @3? -> region
  # Examples:
  #  $vines([10, 30], 0.1)
  #  $vines([20, 40], 0.2, $MY_NOISE)
  vines(): [
    $single_vine(vine:1, south, @1, @2, @3?)
    $single_vine(vine:2, west, @1, @2, @3?)
    $single_vine(vine:4, north, @1, @2, @3?)
    $single_vine(vine:8, east, @1, @2, @3?)
  ]
  # Private values that will not get exported.
  variables: {
    # Yields a vine block for a single direction.
    # Parameters: 
    #  @1 -> block
    #  @2 -> direction
    #  @3  -> height
    #  @4  -> integrity
    #  @5? -> region
    single_vine(): {
      placement: overlay
      states: @1
      direction: @2
      height: @3
      integrity: @4
      region: @5?
    }
  }
}