package personthecat.cavegenerator.util;

import com.google.common.collect.ImmutableList;
import net.minecraft.ChatFormatting;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.Style;
import net.minecraft.network.chat.TextComponent;
import personthecat.catlib.util.SyntaxLinter;
import personthecat.catlib.util.unsafe.CachingReflectionHelper;
import personthecat.cavegenerator.presets.validator.ValidationError;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class DetailedPresetLinter extends SyntaxLinter {

    private static final Highlighter GENERATED_BY =
        new RegexHighlighter("#\\sGenerated by:.*$", color(ChatFormatting.GREEN));

    private static final Highlighter[] HIGHLIGHTERS =
        ImmutableList.<Highlighter>builder()
            .add(ErrorMessageHighlighter.INSTANCE)
            .add(GENERATED_BY)
            .add(CaveLinter.HIGHLIGHTERS)
            .build()
            .toArray(new Highlighter[0]);

    public static final DetailedPresetLinter INSTANCE =
        CachingReflectionHelper.tryInstantiate(DetailedPresetLinter.class);

    @SuppressWarnings("unused")
    public DetailedPresetLinter() {
        super(HIGHLIGHTERS);
    }

    private static class ErrorMessageHighlighter implements Highlighter {

        private static final Pattern PATTERN =
            Pattern.compile("#\\s" + ValidationError.INDICATOR + ".*$", Pattern.MULTILINE);

        private static final int INDICATOR_LENGTH = ("# " + ValidationError.INDICATOR).length();
        private static final Style STYLE = color(ChatFormatting.RED).withBold(true);
        private static final ErrorMessageHighlighter INSTANCE = new ErrorMessageHighlighter();

        @Override
        public Instance get(final String text) {
            return new Instance(text);
        }

        private static class Instance implements Highlighter.Instance {

            private final Matcher matcher;
            final String text;
            boolean found;

            private Instance(final String text) {
                this.matcher = PATTERN.matcher(text);
                this.text = text;
                this.found = this.matcher.find();
            }

            @Override
            public void next() {
                this.found = this.matcher.find();
            }

            @Override
            public boolean found() {
                return this.found;
            }

            @Override
            public int start() {
                return this.matcher.start();
            }

            @Override
            public int end() {
                return this.matcher.end();
            }

            @Override
            public Component replacement() {
                return new TextComponent("[ ")
                    .append(new TextComponent(this.text.substring(this.start() + INDICATOR_LENGTH, this.end())).setStyle(STYLE))
                    .append(" ]");
            }
        }
    }
}
