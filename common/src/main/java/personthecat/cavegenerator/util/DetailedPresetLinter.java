package personthecat.cavegenerator.util;

import com.google.common.collect.ImmutableList;
import net.minecraft.ChatFormatting;
import net.minecraft.network.chat.*;
import personthecat.catlib.util.SyntaxLinter;
import personthecat.catlib.util.unsafe.CachingReflectionHelper;
import personthecat.cavegenerator.presets.validator.ValidationError;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class DetailedPresetLinter extends SyntaxLinter {

    private static final Style ERROR_STYLE = color(ChatFormatting.RED).withBold(true);

    private static final Highlighter ERROR_MESSAGE_HIGHLIGHTER =
        new ErrorMessageHighlighter(
            new TextComponent("[ "),
            ValidationError.INDICATOR,
            new TextComponent(" ]"),
            ERROR_STYLE);

    private static final Style IGNORED_STYLE =
        color(ChatFormatting.GRAY).withItalic(true).withHoverEvent(
            new HoverEvent(HoverEvent.Action.SHOW_TEXT,
                new TranslatableComponent("cg.errorText.includedButIgnored")));

    private static final Highlighter IGNORED_FIELD_HIGHLIGHTER =
        new ErrorMessageHighlighter(
            new TextComponent("... ").setStyle(IGNORED_STYLE),
            "Skipped ",
            new TextComponent(""),
            IGNORED_STYLE);

    private static final Highlighter GENERATED_BY =
        new RegexHighlighter("#\\sGenerated by:.*$", color(ChatFormatting.GREEN));

    private static final Highlighter[] HIGHLIGHTERS =
        ImmutableList.<Highlighter>builder()
            .add(ERROR_MESSAGE_HIGHLIGHTER)
            .add(IGNORED_FIELD_HIGHLIGHTER)
            .add(GENERATED_BY)
            .add(CaveLinter.HIGHLIGHTERS)
            .build()
            .toArray(new Highlighter[0]);

    public static final DetailedPresetLinter INSTANCE =
        CachingReflectionHelper.tryInstantiate(DetailedPresetLinter.class);

    @SuppressWarnings("unused")
    public DetailedPresetLinter() {
        super(HIGHLIGHTERS);
    }

    private static class ErrorMessageHighlighter implements Highlighter {
        private final Pattern pattern;
        private final int indicatorLength;
        private final Component prefix;
        private final Component postfix;
        private final Style style;

        private ErrorMessageHighlighter(
                final Component prefix, final String indicator, final Component postfix, final Style style) {
            this.pattern = Pattern.compile("#\\s" + indicator + ".*$", Pattern.MULTILINE);
            this.indicatorLength = ("# " + indicator).length();
            this.prefix = prefix;
            this.postfix = postfix;
            this.style = style;
        }

        @Override
        public Instance get(final String text) {
            return new Instance(text);
        }

        private class Instance implements Highlighter.Instance {
            private final Matcher matcher;
            final String text;
            boolean found;

            private Instance(final String text) {
                this.matcher = pattern.matcher(text);
                this.text = text;
                this.found = this.matcher.find();
            }

            @Override
            public void next() {
                this.found = this.matcher.find();
            }

            @Override
            public boolean found() {
                return this.found;
            }

            @Override
            public int start() {
                return this.matcher.start();
            }

            @Override
            public int end() {
                return this.matcher.end();
            }

            @Override
            public Component replacement() {
                return new TextComponent("")
                    .append(prefix)
                    .append(new TextComponent(this.text.substring(this.start() + indicatorLength, this.end())).setStyle(style))
                    .append(postfix);
            }
        }
    }
}
